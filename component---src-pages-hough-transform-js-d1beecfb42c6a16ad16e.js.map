{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/_math-expm1.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.cosh.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_math-log1p.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.acosh.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.fill.js","webpack:///./src/components/hough-transform/canvas-draw/lazy-brush/Point.js","webpack:///./src/components/hough-transform/canvas-draw/lazy-brush/LazyPoint.js","webpack:///./src/components/hough-transform/canvas-draw/lazy-brush/LazyBrush.js","webpack:///./src/components/hough-transform/canvas-draw/catenary-curve/Point.js","webpack:///./src/components/hough-transform/canvas-draw/catenary-curve/Catenary.js","webpack:///./src/components/hough-transform/canvas-draw/canvasdraw.js","webpack:///./src/components/hough-transform/canvashough.js","webpack:///./src/pages/hough-transform.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.sinh.js"],"names":["$expm1","Math","expm1","module","exports","x","exp","$export","S","cosh","log1p","log","sqrt","$acosh","acosh","F","floor","Number","MAX_VALUE","Infinity","NaN","LN2","P","fill","Point","y","this","LazyPoint","update","point","moveByAngle","angle","distance","angleRotated","PI","sin","cos","equalsTo","getDifferenceTo","getDistanceTo","diff","pow","getAngleTo","atan2","toObject","LazyBrush","radius","enabled","initialPoint","_isEnabled","pointer","brush","_hasMoved","enable","disable","isEnabled","setRadius","getRadius","getBrushCoordinates","getPointerCoordinates","getBrush","getPointer","getAngle","getDistance","brushHasMoved","newPointerPoint","both","Catenary","segments","iterationLimit","p1","p2","drawToCanvas","context","point1","point2","chainLength","isFlipped","curveData","isStraight","h","v","a","getCatenaryParameter","offsetX","offsetY","getCurve","mx","my","drawLine","drawCurve","length","limit","m","prevx","count","abs","sinh","data","d","i","push","moveTo","lineTo","ox","oy","temp","quadraticCurveTo","midPointBtw","canvasStyle","display","position","canvasTypes","name","zIndex","CanvasDraw","props","drawImage","imgSrc","image","Image","crossOrigin","onload","ctx","img","w","canvas","width","height","cx","cy","cw","ch","iw","ih","r","min","nw","nh","ar","grid","src","undo","lines","slice","clear","simulateDrawingLines","immediate","triggerOnChange","getSaveData","JSON","stringify","canvasWidth","canvasHeight","loadSaveData","saveData","immediateLoading","Error","parse","scaleX","scaleY","scaleAvg","map","line","points","p","brushRadius","curTime","timeoutGap","loadTimeOffset","forEach","brushColor","drawPoints","saveLine","window","setTimeout","handleDrawStart","e","preventDefault","isPressing","getPointerPos","touches","lazy","handlePointerMove","handleDrawMove","handleDrawEnd","isDrawing","setCanvasSize","style","rect","interface","getBoundingClientRect","clientX","clientY","changedTouches","left","top","disabled","isDisabled","updateCurrentPoint","mouseHasMoved","lineJoin","lineCap","strokeStyle","clearRect","lineWidth","beginPath","len","midPoint","stroke","currentPositionX","currentPositionY","onPointDraw","drawing","onChange","valuesChanged","loop","once","drawInterface","requestAnimationFrame","drawGrid","hideGrid","setLineDash","gridColor","countX","countY","hideInterface","fillStyle","arc","catenaryColor","catenary","componentDidMount","lazyRadius","devicePixelRatio","innerWidth","innerHeight","initX","initY","componentDidUpdate","prevProps","render","className","background","backgroundColor","touchAction","ref","container","canvasContainer","isInterface","key","getContext","onMouseDown","undefined","onBlur","onMouseMove","onMouseUp","onMouseOut","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","PureComponent","defaultProps","CanvasHough","houghThetaDelta","numAngleCells","hough_accum","Array","rhoMax","drawingWidth","drawingHeight","cosTable","sinTable","theta","thetaIndex","hough","rho","curve_points","updateCanvas","drawHoughPoints","React","Component","StyledMainContainer","styled","main","theme","mixins","button","HoughPage","location","canvasSize","screen","houghCanvasRef","useRef","drawCanvasRef","revealTitle","useEffect","sr","reveal","current","srConfig","Helmet","title","minWidth","onClick","E"],"mappings":"8EACA,IAAIA,EAASC,KAAKC,MAClBC,EAAOC,SAAYJ,GAEdA,EAAO,IAAM,oBAAsBA,EAAO,IAAM,qBAE7B,OAAnBA,GAAQ,OACT,SAAeK,GACjB,OAAmB,IAAXA,GAAKA,GAAUA,EAAIA,GAAK,MAAQA,EAAI,KAAOA,EAAIA,EAAIA,EAAI,EAAIJ,KAAKK,IAAID,GAAK,GAC/EL,G,uBCRJ,IAAIO,EAAU,EAAQ,QAClBD,EAAML,KAAKK,IAEfC,EAAQA,EAAQC,EAAG,OAAQ,CACzBC,KAAM,SAAcJ,GAClB,OAAQC,EAAID,GAAKA,GAAKC,GAAKD,IAAM,M,mBCLrCF,EAAOC,QAAUH,KAAKS,OAAS,SAAeL,GAC5C,OAAQA,GAAKA,IAAM,MAAQA,EAAI,KAAOA,EAAIA,EAAIA,EAAI,EAAIJ,KAAKU,IAAI,EAAIN,K,qBCDrE,IAAIE,EAAU,EAAQ,QAClBG,EAAQ,EAAQ,QAChBE,EAAOX,KAAKW,KACZC,EAASZ,KAAKa,MAElBP,EAAQA,EAAQC,EAAID,EAAQQ,IAAMF,GAEW,KAAxCZ,KAAKe,MAAMH,EAAOI,OAAOC,aAEzBL,EAAOM,MAAaA,KACtB,OAAQ,CACTL,MAAO,SAAeT,GACpB,OAAQA,GAAKA,GAAK,EAAIe,IAAMf,EAAI,kBAC5BJ,KAAKU,IAAIN,GAAKJ,KAAKoB,IACnBX,EAAML,EAAI,EAAIO,EAAKP,EAAI,GAAKO,EAAKP,EAAI,Q,qBCd7C,IAAIE,EAAU,EAAQ,QAEtBA,EAAQA,EAAQe,EAAG,QAAS,CAAEC,KAAM,EAAQ,UAE5C,EAAQ,OAAR,CAAiC,S,kECclBC,G,oGANb,SAAYnB,EAAGoB,GACbC,KAAKrB,EAAIA,EACTqB,KAAKD,EAAIA,I,IC4EEE,E,wLA5EbC,OAAA,SAAOC,GACLH,KAAKrB,EAAIwB,EAAMxB,EACfqB,KAAKD,EAAII,EAAMJ,G,EASjBK,YAAA,SAAYC,EAAOC,GAEjB,IAAMC,EAAeF,EAAQ9B,KAAKiC,GAAK,EAEvCR,KAAKrB,EAAIqB,KAAKrB,EAAIJ,KAAKkC,IAAIF,GAAgBD,EAC3CN,KAAKD,EAAIC,KAAKD,EAAIxB,KAAKmC,IAAIH,GAAgBD,G,EAS7CK,SAAA,SAASR,GACP,OAAOH,KAAKrB,IAAMwB,EAAMxB,GAAKqB,KAAKD,IAAMI,EAAMJ,G,EAShDa,gBAAA,SAAgBT,GACd,OAAO,IAAIL,EAAME,KAAKrB,EAAIwB,EAAMxB,EAAGqB,KAAKD,EAAII,EAAMJ,I,EASpDc,cAAA,SAAcV,GACZ,IAAMW,EAAOd,KAAKY,gBAAgBT,GAElC,OAAO5B,KAAKW,KAAKX,KAAKwC,IAAID,EAAKnC,EAAG,GAAKJ,KAAKwC,IAAID,EAAKf,EAAG,K,EAS1DiB,WAAA,SAAWb,GACT,IAAMW,EAAOd,KAAKY,gBAAgBT,GAElC,OAAO5B,KAAK0C,MAAMH,EAAKf,EAAGe,EAAKnC,I,EAQjCuC,SAAA,WACE,MAAO,CACLvC,EAAGqB,KAAKrB,EACRoB,EAAGC,KAAKD,I,GA7EUD,GCsKTqB,E,WA7Jb,cAA8F,IAAD,aAAJ,GAAI,MAA/EC,cAA+E,MAVxE,GAUwE,MAAtDC,eAAsD,aAAtCC,oBAAsC,MAAvB,CAAE3C,EAAG,EAAGoB,EAAG,GAAY,EAC3FC,KAAKoB,OAASA,EACdpB,KAAKuB,WAAaF,EAElBrB,KAAKwB,QAAU,IAAIvB,EAAUqB,EAAa3C,EAAG2C,EAAavB,GAC1DC,KAAKyB,MAAQ,IAAIxB,EAAUqB,EAAa3C,EAAG2C,EAAavB,GAExDC,KAAKK,MAAQ,EACbL,KAAKM,SAAW,EAChBN,KAAK0B,WAAY,E,2BAOnBC,OAAA,WACE3B,KAAKuB,YAAa,G,EAOpBK,QAAA,WACE5B,KAAKuB,YAAa,G,EAMpBM,UAAA,WACE,OAAO7B,KAAKuB,Y,EAQdO,UAAA,SAAUV,GACRpB,KAAKoB,OAASA,G,EAQhBW,UAAA,WACE,OAAO/B,KAAKoB,Q,EAQdY,oBAAA,WACE,OAAOhC,KAAKyB,MAAMP,Y,EAQpBe,sBAAA,WACE,OAAOjC,KAAKwB,QAAQN,Y,EAQtBgB,SAAA,WACE,OAAOlC,KAAKyB,O,EAQdU,WAAA,WACE,OAAOnC,KAAKwB,S,EAQdY,SAAA,WACE,OAAOpC,KAAKK,O,EAQdgC,YAAA,WACE,OAAOrC,KAAKM,U,EAQdgC,cAAA,WACE,OAAOtC,KAAK0B,W,EAWdxB,OAAA,SAAOqC,EAAP,GAAgD,IAAD,cAAJ,GAAI,GAArBC,YAAqB,SAE7C,OADAxC,KAAK0B,WAAY,IACb1B,KAAKwB,QAAQb,SAAS4B,KAAqBC,KAI/CxC,KAAKwB,QAAQtB,OAAOqC,GAEhBC,GACFxC,KAAK0B,WAAY,EACjB1B,KAAKyB,MAAMvB,OAAOqC,IACX,IAGLvC,KAAKuB,YACPvB,KAAKM,SAAWN,KAAKwB,QAAQX,cAAcb,KAAKyB,OAChDzB,KAAKK,MAAQL,KAAKwB,QAAQR,WAAWhB,KAAKyB,OAEtCzB,KAAKM,SAAWN,KAAKoB,SACvBpB,KAAKyB,MAAMrB,YAAYJ,KAAKK,MAAOL,KAAKM,SAAWN,KAAKoB,QACxDpB,KAAK0B,WAAY,KAGnB1B,KAAKM,SAAW,EAChBN,KAAKK,MAAQ,EACbL,KAAKyB,MAAMvB,OAAOqC,GAClBvC,KAAK0B,WAAY,IAGZ,K,KC/HI5B,G,yCAtCb,WAAYnB,EAAGoB,GACbC,KAAKrB,EAAIA,EACTqB,KAAKD,EAAIA,E,2BAQXG,OAAA,SAAOC,GACLH,KAAKrB,EAAIwB,EAAMxB,EACfqB,KAAKD,EAAII,EAAMJ,G,EASjBa,gBAAA,SAAgBT,GACd,OAAO,IAAIL,EAAME,KAAKrB,EAAIwB,EAAMxB,EAAGqB,KAAKD,EAAII,EAAMJ,I,EASpDc,cAAA,SAAcV,GACZ,IAAMW,EAAOd,KAAKY,gBAAgBT,GAElC,OAAO5B,KAAKW,KAAKX,KAAKwC,IAAID,EAAKnC,EAAG,GAAKJ,KAAKwC,IAAID,EAAKf,EAAG,K,MCyK7C0C,E,WAlLb,cAA2D,IAAD,aAAJ,GAAI,MAA5CC,gBAA4C,MAAjC,GAAiC,MAA7BC,sBAA6B,MAAZ,IAAY,EACxD3C,KAAK4C,GAAK,IAAI9C,EACdE,KAAK6C,GAAK,IAAI/C,EAEdE,KAAK0C,SAAWA,EAChB1C,KAAK2C,eAAiBA,E,2BAWxBG,aAAA,SAAaC,EAASC,EAAQC,EAAQC,GACpClD,KAAK4C,GAAG1C,OAAO8C,GACfhD,KAAK6C,GAAG3C,OAAO+C,GAEf,IAAME,EAAYnD,KAAK4C,GAAGjE,EAAIqB,KAAK6C,GAAGlE,EAEhCiE,EAAKO,EAAYnD,KAAK6C,GAAK7C,KAAK4C,GAChCC,EAAKM,EAAYnD,KAAK4C,GAAK5C,KAAK6C,GAIlCO,EAAY,GACZC,GAAa,EAIjB,GAPiBT,EAAG/B,cAAcgC,GAOnBK,EAKb,GAJaL,EAAGlE,EAAIiE,EAAGjE,EAIZ,IAAM,CACf,IAAM2E,EAAIT,EAAGlE,EAAIiE,EAAGjE,EACd4E,EAAIV,EAAG9C,EAAI6C,EAAG7C,EACdyD,GAAKxD,KAAKyD,qBAAqBH,EAAGC,EAAGL,EAAalD,KAAK2C,gBACvDhE,EAAgE,IAA3D6E,EAAIjF,KAAKU,KAAKiE,EAAcK,IAAML,EAAcK,IAAMD,GAC3DvD,EAAIyD,EAAIjF,KAAKQ,KAAKJ,EAAI6E,GACtBE,EAAUd,EAAGjE,EAAIA,EACjBgF,EAAUf,EAAG7C,EAAIA,EACvBqD,EAAYpD,KAAK4D,SAASJ,EAAGZ,EAAIC,EAAIa,EAASC,EAAS3D,KAAK0C,UAC5DW,GAAa,MACR,CACL,IAAMQ,EAAqB,IAAfjB,EAAGjE,EAAIkE,EAAGlE,GAChBmF,EAAmC,IAA7BlB,EAAG7C,EAAI8C,EAAG9C,EAAImD,GAE1BE,EAAY,CACV,CAACR,EAAGjE,EAAGiE,EAAG7C,GACV,CAAC8D,EAAIC,GACL,CAACjB,EAAGlE,EAAGkE,EAAG9C,SAIdqD,EAAY,CACV,CAACR,EAAGjE,EAAGiE,EAAG7C,GACV,CAAC8C,EAAGlE,EAAGkE,EAAG9C,IAUd,OANIsD,EACFrD,KAAK+D,SAASX,EAAWL,GAEzB/C,KAAKgE,UAAUZ,EAAWL,GAGrBK,G,EAWTK,qBAAA,SAAqBH,EAAGC,EAAGU,EAAQC,GAMjC,IALA,IAAMC,EAAI5F,KAAKW,KAAK+E,EAASA,EAASV,EAAIA,GAAKD,EAC3C3E,EAAIJ,KAAKa,MAAM+E,GAAK,EACpBC,GAAS,EACTC,EAAQ,EAEL9F,KAAK+F,IAAI3F,EAAIyF,GAjGR,MAiG4BC,EAAQH,GAC9CE,EAAQzF,EACRA,IAASJ,KAAKgG,KAAK5F,GAAKwF,EAAIxF,IAAMJ,KAAKQ,KAAKJ,GAAKwF,GACjDE,IAGF,OAAOf,GAAK,EAAI3E,I,EAelBiF,SAAA,SAASJ,EAAGZ,EAAIC,EAAIa,EAASC,EAASjB,GAMpC,IALA,IAAM8B,EAAO,CAAC5B,EAAGjE,EAAG6E,EAAIjF,KAAKQ,MAAM6D,EAAGjE,EAAI+E,GAAWF,GAAKG,GAEpDc,EAAI5B,EAAGlE,EAAIiE,EAAGjE,EACdsF,EAASvB,EAAW,EAEjBgC,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAC/B,IAAM/F,EAAIiE,EAAGjE,EAAK8F,GAAKC,EAAI,IAAQT,EAC7BlE,EAAIyD,EAAIjF,KAAKQ,MAAMJ,EAAI+E,GAAWF,GAAKG,EAC7Ca,EAAKG,KAAKhG,EAAGoB,GAKf,OAFAyE,EAAKG,KAAK9B,EAAGlE,EAAG6E,EAAIjF,KAAKQ,MAAM8D,EAAGlE,EAAI+E,GAAWF,GAAKG,GAE/Ca,G,EASTT,SAAA,SAASS,EAAMzB,GACbA,EAAQ6B,OAAOJ,EAAK,GAAG,GAAIA,EAAK,GAAG,IAEnCzB,EAAQ8B,OAAOL,EAAK,GAAG,GAAIA,EAAK,GAAG,K,EAYrCR,UAAA,SAAUQ,EAAMzB,GACd,IAAIkB,EAAuB,GAAdO,EAAKP,OAAe,EAC7Ba,EAAKN,EAAK,GACVO,EAAKP,EAAK,GAERQ,EAAO,GAEbjC,EAAQ6B,OAAOJ,EAAK,GAAIA,EAAK,IAE7B,IAAK,IAAIE,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAC/B,IAAM/F,EAAI6F,EAAS,EAAJE,GACT3E,EAAIyE,EAAS,EAAJE,EAAQ,GACjBb,EAAgB,IAAVlF,EAAImG,GACVhB,EAAgB,IAAV/D,EAAIgF,GAChBC,EAAKL,KAAK,CAACG,EAAIC,EAAIlB,EAAIC,IACvBf,EAAQkC,iBAAiBH,EAAIC,EAAIlB,EAAIC,GACrCgB,EAAKnG,EACLoG,EAAKhF,EAWP,OARAkE,EAASO,EAAKP,OACdlB,EAAQkC,iBACNT,EAAKP,EAAS,GACdO,EAAKP,EAAS,GACdO,EAAKP,EAAS,GACdO,EAAKP,EAAS,IAGTe,G,+uBC9GX,SAASE,EAAYtC,EAAIC,GACvB,MAAO,CACLlE,EAAGiE,EAAGjE,GAAKkE,EAAGlE,EAAIiE,EAAGjE,GAAK,EAC1BoB,EAAG6C,EAAG7C,GAAK8C,EAAG9C,EAAI6C,EAAG7C,GAAK,GAI9B,IAAMoF,EAAc,CAClBC,QAAS,QACTC,SAAU,YAGNC,EAAc,CAClB,CACEC,KAAM,YACNC,OAAQ,IAEV,CACED,KAAM,UACNC,OAAQ,IAEV,CACED,KAAM,OACNC,OAAQ,IAEV,CACED,KAAM,OACNC,OAAQ,KAMSC,E,oBAyCnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAmEFC,UAAY,WACL,EAAKD,MAAME,SAKhB,EAAKC,MAAQ,IAAIC,MAGjB,EAAKD,MAAME,YAAc,YAGzB,EAAKF,MAAMG,OAAS,kBA3OxB,YAAqE,IAAD,aAAJ,GAAI,EAA/CC,EAA+C,EAA/CA,IAAKC,EAA0C,EAA1CA,IAAKvH,EAAqC,EAArCA,EAAGoB,EAAkC,EAAlCA,EAAGoG,EAA+B,EAA/BA,EAAG7C,EAA4B,EAA5BA,EAAGI,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,QAEjC,iBAANhF,IACTA,EAAI,GAEW,iBAANoB,IACTA,EAAI,GAEW,iBAANoG,IACTA,EAAIF,EAAIG,OAAOC,OAEA,iBAAN/C,IACTA,EAAI2C,EAAIG,OAAOE,QAEM,iBAAZ5C,IACTA,EAAU,IAEW,iBAAZC,IACTA,EAAU,IAIRD,EAAU,IACZA,EAAU,GAERC,EAAU,IACZA,EAAU,GAERD,EAAU,IACZA,EAAU,GAERC,EAAU,IACZA,EAAU,GAGZ,IAKI4C,EACAC,EACAC,EACAC,EAREC,EAAKT,EAAIG,MACTO,EAAKV,EAAII,OACTO,EAAItI,KAAKuI,IAAIX,EAAIQ,EAAIrD,EAAIsD,GAC3BG,EAAKJ,EAAKE,EACVG,EAAKJ,EAAKC,EAKVI,EAAK,EAGLF,EAAKZ,IACPc,EAAKd,EAAIY,GAEPxI,KAAK+F,IAAI2C,EAAK,GAAK,OAASD,EAAK1D,IACnC2D,EAAK3D,EAAI0D,IASXT,GAAMI,GAHNF,EAAKE,IAJLI,GAAME,GAIUd,KAGCzC,GAIR,IACP6C,EAAK,IAJPC,GAAMI,GAHNF,EAAKE,IAJLI,GAAMC,GAIU3D,KAGCK,GAMR,IACP6C,EAAK,GAEHC,EAAKE,IACPF,EAAKE,GAEHD,EAAKE,IACPF,EAAKE,GAIPX,EAAIN,UAAUO,EAAKK,EAAIC,EAAIC,EAAIC,EAAI/H,EAAGoB,EAAGoG,EAAG7C,GA6JhBqC,CAAU,CAAEM,IAAK,EAAKA,IAAIiB,KAAMhB,IAAK,EAAKL,SACpE,EAAKA,MAAMsB,IAAM,EAAKzB,MAAME,SAjFX,EAoFnBwB,KAAO,WACL,IAAMC,EAAQ,EAAKA,MAAMC,MAAM,GAAI,GACnC,EAAKC,QACL,EAAKC,qBAAqB,CAAEH,QAAOI,WAAW,IAC9C,EAAKC,mBAxFY,EA2FnBC,YAAc,kBAEZC,KAAKC,UAAU,CACbR,MAAO,EAAKA,MACZhB,MAAO,EAAKX,MAAMoC,YAClBxB,OAAQ,EAAKZ,MAAMqC,gBAhGJ,EAmGnBC,aAAe,SAACC,EAAUR,GACxB,QADoE,IAA5CA,MAAY,EAAK/B,MAAMwC,kBACvB,iBAAbD,EACT,MAAM,IAAIE,MAAM,wCAFkD,MAKnCP,KAAKQ,MAAMH,GAApCZ,EAL4D,EAK5DA,MAAOhB,EALqD,EAKrDA,MAAOC,EAL8C,EAK9CA,OAEtB,IAAKe,GAA+B,mBAAfA,EAAM1C,KACzB,MAAM,IAAIwD,MAAM,wCAKlB,GAFA,EAAKZ,QAEDlB,IAAU,EAAKX,MAAMoC,aAAexB,IAAW,EAAKZ,MAAMqC,aAC5D,EAAKP,qBAAqB,CACxBH,QACAI,kBAEG,CAEL,IAAMY,EAAS,EAAK3C,MAAMoC,YAAczB,EAClCiC,EAAS,EAAK5C,MAAMqC,aAAezB,EACnCiC,GAAYF,EAASC,GAAU,EAErC,EAAKd,qBAAqB,CACxBH,MAAOA,EAAMmB,KAAI,SAAAC,GAAI,wBAChBA,EADgB,CAEnBC,OAAQD,EAAKC,OAAOF,KAAI,SAAAG,GAAC,MAAK,CAC5BhK,EAAGgK,EAAEhK,EAAI0J,EACTtI,EAAG4I,EAAE5I,EAAIuI,MAEXM,YAAaH,EAAKG,YAAcL,OAElCd,gBApIa,EAyInBD,qBAAuB,YAA2B,IAAxBH,EAAuB,EAAvBA,MAAOI,EAAgB,EAAhBA,UAG3BoB,EAAU,EACRC,EAAarB,EAAY,EAAI,EAAK/B,MAAMqD,eAE9C1B,EAAM2B,SAAQ,SAAAP,GAAS,IACbC,EAAoCD,EAApCC,OAAQO,EAA4BR,EAA5BQ,WAAYL,EAAgBH,EAAhBG,YAG5B,GAAInB,EAWF,OATA,EAAKyB,WAAW,CACdR,SACAO,aACAL,gBAIF,EAAKF,OAASA,OACd,EAAKS,SAAS,CAAEF,aAAYL,gBAK9B,IAnBoB,eAmBXlE,GACPmE,GAAWC,EACXM,OAAOC,YAAW,WAChB,EAAKH,WAAW,CACdR,OAAQA,EAAOpB,MAAM,EAAG5C,EAAI,GAC5BuE,aACAL,kBAEDC,IARInE,EAAI,EAAGA,EAAIgE,EAAOzE,OAAQS,IAAM,EAAhCA,GAWTmE,GAAWC,EACXM,OAAOC,YAAW,WAEhB,EAAKX,OAASA,EACd,EAAKS,SAAS,CAAEF,aAAYL,kBAC3BC,OAlLY,EAsLnBS,gBAAkB,SAAAC,GAChBA,EAAEC,iBAGF,EAAKC,YAAa,EAJG,MAMJ,EAAKC,cAAcH,GAA5B5K,EANa,EAMbA,EAAGoB,EANU,EAMVA,EAEPwJ,EAAEI,SAAWJ,EAAEI,QAAQ1F,OAAS,GAElC,EAAK2F,KAAK1J,OAAO,CAAEvB,IAAGoB,KAAK,CAAEyC,MAAM,IAIrC,EAAKqH,kBAAkBlL,EAAGoB,IApMT,EAuMnB+J,eAAiB,SAAAP,GACfA,EAAEC,iBADkB,MAGH,EAAKE,cAAcH,GAA5B5K,EAHY,EAGZA,EAAGoB,EAHS,EAGTA,EACX,EAAK8J,kBAAkBlL,EAAGoB,IA3MT,EA8MnBgK,cAAgB,SAAAR,GACdA,EAAEC,iBAGF,EAAKM,eAAeP,GAGpB,EAAKS,WAAY,EACjB,EAAKP,YAAa,EAClB,EAAKN,YAvNY,EA0NnBc,cAAgB,SAAC7D,EAAQC,EAAOC,GAC9BF,EAAOC,MAAQA,EACfD,EAAOE,OAASA,EAChBF,EAAO8D,MAAM7D,MAAQA,EACrBD,EAAO8D,MAAM5D,OAASA,GA9NL,EAiOnBoD,cAAgB,SAAAH,GACd,IAAMY,EAAO,EAAK/D,OAAOgE,UAAUC,wBAG/BC,EAAUf,EAAEe,QACZC,EAAUhB,EAAEgB,QAShB,OANIhB,EAAEiB,gBAAkBjB,EAAEiB,eAAevG,OAAS,IAChDqG,EAAUf,EAAEiB,eAAe,GAAGF,QAC9BC,EAAUhB,EAAEiB,eAAe,GAAGD,SAIzB,CACL5L,EAAG2L,EAAUH,EAAKM,KAClB1K,EAAGwK,EAAUJ,EAAKO,MAjPH,EAqPnBb,kBAAoB,SAAClL,EAAGoB,GACtB,IAAI,EAAK2F,MAAMiF,SAAf,CAIA,EAAKf,KAAK1J,OAAO,CAAEvB,IAAGoB,MACtB,IAAM6K,GAAc,EAAKhB,KAAK/H,aAEzB,EAAK4H,aAAe,EAAKO,WAAeY,GAAc,EAAKnB,cAE9D,EAAKO,WAAY,EACjB,EAAKtB,OAAO/D,KAAK,EAAKiF,KAAKnI,MAAMP,aAG/B,EAAK8I,YAEP,EAAKtB,OAAO/D,KAAK,EAAKiF,KAAKnI,MAAMP,YAGjC,EAAKgI,WAAW,CACdR,OAAQ,EAAKA,OACbO,WAAY,EAAKvD,MAAMuD,WACvBL,YAAa,EAAKlD,MAAMkD,cAI1B,EAAKiC,mBAAmB,CAAElM,IAAGoB,OAG/B,EAAK+K,eAAgB,IAlRJ,EAqRnB5B,WAAa,YAA0C,IAAvCR,EAAsC,EAAtCA,OAAQO,EAA8B,EAA9BA,WAAYL,EAAkB,EAAlBA,YAClC,EAAK3C,IAAIjB,KAAK+F,SAAW,QACzB,EAAK9E,IAAIjB,KAAKgG,QAAU,QACxB,EAAK/E,IAAIjB,KAAKiG,YAAchC,EAE5B,EAAKhD,IAAIjB,KAAKkG,UAAU,EAAG,EAAG,EAAKjF,IAAIjB,KAAKoB,OAAOC,MAAO,EAAKJ,IAAIjB,KAAKoB,OAAOE,QAC/E,EAAKL,IAAIjB,KAAKmG,UAA0B,EAAdvC,EAE1B,IAAIhG,EAAK8F,EAAO,GACZ7F,EAAK6F,EAAO,GAEhB,EAAKzC,IAAIjB,KAAKJ,OAAO/B,EAAGlE,EAAGkE,EAAG9C,GAC9B,EAAKkG,IAAIjB,KAAKoG,YAEd,IAAK,IAAI1G,EAAI,EAAG2G,EAAM3C,EAAOzE,OAAQS,EAAI2G,EAAK3G,IAAK,CAGjD,IAAM4G,EAAWpG,EAAYtC,EAAIC,GACjC,EAAKoD,IAAIjB,KAAKC,iBAAiBrC,EAAGjE,EAAGiE,EAAG7C,EAAGuL,EAAS3M,EAAG2M,EAASvL,GAChE6C,EAAK8F,EAAOhE,GACZ7B,EAAK6F,EAAOhE,EAAI,GAKlB,EAAKuB,IAAIjB,KAAKH,OAAOjC,EAAGjE,EAAGiE,EAAG7C,GAC9B,EAAKkG,IAAIjB,KAAKuG,UA/SG,EAkTnBV,mBAAqB,YAAe,IAAZlM,EAAW,EAAXA,EAAGoB,EAAQ,EAARA,EAEzBA,GAAQ,GADRpB,GAAQ,KAEI,EAAK6M,kBAAoBzL,IAAM,EAAK0L,mBAC9C,EAAKD,iBAAmB7M,EACxB,EAAK8M,iBAAmB1L,EAExB,EAAK2F,MAAMgG,YAAY,CAAE/M,EAAGA,EAAGoB,EAAGA,MAzTnB,EA6TnBoJ,SAAW,YAAuC,IAAD,aAAP,GAAO,EAAnCF,EAAmC,EAAnCA,WAAYL,EAAuB,EAAvBA,YACxB,KAAI,EAAKF,OAAOzE,OAAS,GAAzB,CAKA,EAAKoD,MAAM1C,KAAK,CACd+D,OAAO,EAAK,EAAKA,QACjBO,WAAYA,GAAc,EAAKvD,MAAMuD,WACrCL,YAAaA,GAAe,EAAKlD,MAAMkD,cAIzC,EAAKF,OAAOzE,OAAS,EAErB,IAAMoC,EAAQ,EAAKD,OAAOpB,KAAKqB,MACzBC,EAAS,EAAKF,OAAOpB,KAAKsB,OAGhC,EAAKL,IAAI0F,QAAQhG,UAAU,EAAKS,OAAOpB,KAAM,EAAG,EAAGqB,EAAOC,GAG1D,EAAKL,IAAIjB,KAAKkG,UAAU,EAAG,EAAG7E,EAAOC,GAErC,EAAKoB,oBArVY,EAwVnBA,gBAAkB,WAChB,EAAKhC,MAAMkG,UAAY,EAAKlG,MAAMkG,S,yHAAX,MAzVN,EA4VnBrE,MAAQ,WACN,EAAKF,MAAQ,GACb,EAAKwE,eAAgB,EACrB,EAAK5F,IAAI0F,QAAQT,UAAU,EAAG,EAAG,EAAK9E,OAAOuF,QAAQtF,MAAO,EAAKD,OAAOuF,QAAQrF,QAChF,EAAKL,IAAIjB,KAAKkG,UAAU,EAAG,EAAG,EAAK9E,OAAOpB,KAAKqB,MAAO,EAAKD,OAAOpB,KAAKsB,SAhWtD,EAmWnBwF,KAAO,YAA4B,IAAD,cAAP,GAAO,GAAxBC,YAAwB,SAChC,GAAI,EAAKjB,eAAiB,EAAKe,cAAe,CAC5C,IAAMrK,EAAU,EAAKoI,KAAK3H,wBACpBR,EAAQ,EAAKmI,KAAK5H,sBAExB,EAAKgK,cAAc,EAAK/F,IAAImE,UAAW5I,EAASC,GAChD,EAAKqJ,eAAgB,EACrB,EAAKe,eAAgB,EAGlBE,GACH3C,OAAO6C,uBAAsB,WAC3B,EAAKH,WA/WQ,EAoXnBI,SAAW,SAAAjG,GACT,IAAI,EAAKP,MAAMyG,SAAf,CAIAlG,EAAIiF,UAAU,EAAG,EAAGjF,EAAIG,OAAOC,MAAOJ,EAAIG,OAAOE,QAEjDL,EAAImF,YACJnF,EAAImG,YAAY,CAAC,EAAG,IACpBnG,EAAImG,YAAY,IAChBnG,EAAIgF,YAAc,EAAKvF,MAAM2G,UAC7BpG,EAAIkF,UAAY,GAKhB,IAHA,IAEImB,EAAS,EACNA,EAASrG,EAAIG,OAAOC,OACzBiG,GAJe,GAKfrG,EAAIrB,OAAO0H,EAAQ,GACnBrG,EAAIpB,OAAOyH,EAAQrG,EAAIG,OAAOE,QAEhCL,EAAIsF,SAGJ,IADA,IAAIgB,EAAS,EACNA,EAAStG,EAAIG,OAAOE,QACzBiG,GAZe,GAaftG,EAAIrB,OAAO,EAAG2H,GACdtG,EAAIpB,OAAOoB,EAAIG,OAAOC,MAAOkG,GAE/BtG,EAAIsF,SAEJtF,EAAImF,YACJnF,EAAIkF,UAAY,EAChBlF,EAAIrB,OAAO,EAAG,GACdqB,EAAIpB,OAAO,EAAGoB,EAAIG,OAAOE,QACzBL,EAAIpB,OAAOoB,EAAIG,OAAOC,MAAOJ,EAAIG,OAAOE,QACxCL,EAAIpB,OAAOoB,EAAIG,OAAOC,MAAO,GAC7BJ,EAAIpB,OAAO,EAAG,GACdoB,EAAIsF,WA1Za,EA6ZnBS,cAAgB,SAAC/F,EAAKzE,EAASC,GACzB,EAAKiE,MAAM8G,gBAIfvG,EAAIiF,UAAU,EAAG,EAAGjF,EAAIG,OAAOC,MAAOJ,EAAIG,OAAOE,QAGjDL,EAAImF,YACJnF,EAAIwG,UAAY,EAAK/G,MAAMuD,WAC3BhD,EAAIyG,IAAIjL,EAAM9C,EAAG8C,EAAM1B,EAAG,EAAK2F,MAAMkD,YAAa,EAAa,EAAVrK,KAAKiC,IAAQ,GAClEyF,EAAIpG,OAGJoG,EAAImF,YACJnF,EAAIwG,UAAY,EAAK/G,MAAMiH,cAC3B1G,EAAIyG,IAAIlL,EAAQ7C,EAAG6C,EAAQzB,EAAG,EAAG,EAAa,EAAVxB,KAAKiC,IAAQ,GACjDyF,EAAIpG,OAGA,EAAK+J,KAAK/H,cACZoE,EAAImF,YACJnF,EAAIkF,UAAY,EAChBlF,EAAI+E,QAAU,QACd/E,EAAImG,YAAY,CAAC,EAAG,IACpBnG,EAAIgF,YAAc,EAAKvF,MAAMiH,cAC7B,EAAKC,SAAS9J,aAAa,EAAKmD,IAAImE,UAAW3I,EAAOD,EAAS,EAAK0B,aACpE+C,EAAIsF,UAINtF,EAAImF,YACJnF,EAAIwG,UAAY,EAAK/G,MAAMiH,cAC3B1G,EAAIyG,IAAIjL,EAAM9C,EAAG8C,EAAM1B,EAAG,EAAG,EAAa,EAAVxB,KAAKiC,IAAQ,GAC7CyF,EAAIpG,SA5bJ,EAAKuG,OAAS,GACd,EAAKH,IAAM,GAEX,EAAK2G,SAAW,IAAInK,EAEpB,EAAKiG,OAAS,GACd,EAAKrB,MAAQ,GAEb,EAAKyD,eAAgB,EACrB,EAAKe,eAAgB,EACrB,EAAK7B,WAAY,EACjB,EAAKP,YAAa,EAElB,EAAK+B,iBAAmB,EACxB,EAAKC,iBAAmB,EAjBP,E,kHAoBnBoB,kBAAA,WAAqB,IAAD,OAClB7M,KAAK4J,KAAO,IAAIzI,EAAU,CACxBC,OAAQpB,KAAK0F,MAAMoH,WAAa1D,OAAO2D,iBACvC1L,SAAS,EACTC,aAAc,CACZ3C,EAAGyK,OAAO4D,WAAa,EACvBjN,EAAGqJ,OAAO6D,YAAc,KAG5BjN,KAAKkD,YAAclD,KAAK0F,MAAMoH,WAAa1D,OAAO2D,iBAElD/M,KAAK2F,YACL3F,KAAKkM,SAASlM,KAAKiG,IAAIiB,MACvBlH,KAAK8L,OAEL1C,OAAOC,YAAW,WAChB,IAAM6D,EAAQ9D,OAAO4D,WAAa,EAC5BG,EAAQ/D,OAAO6D,YAAc,EACnC,EAAKrD,KAAK1J,OAAO,CAAEvB,EAAGuO,EAAQ,EAAKhK,YAAc,EAAGnD,EAAGoN,GAAS,CAAE3K,MAAM,IACxE,EAAKoH,KAAK1J,OAAO,CAAEvB,EAAGuO,EAAQ,EAAKhK,YAAc,EAAGnD,EAAGoN,GAAS,CAAE3K,MAAM,IACxE,EAAKsI,eAAgB,EACrB,EAAKe,eAAgB,EACrB,EAAKtE,QAGD,EAAK7B,MAAMuC,UACb,EAAKD,aAAa,EAAKtC,MAAMuC,YAE9B,M,EAGLmF,mBAAA,SAAmBC,GACbA,EAAUP,aAAe9M,KAAK0F,MAAMoH,aAEtC9M,KAAKkD,YAAclD,KAAK0F,MAAMoH,WAAa1D,OAAO2D,iBAClD/M,KAAK4J,KAAK9H,UAAU9B,KAAK0F,MAAMoH,WAAa1D,OAAO2D,mBAGjDM,EAAUpF,WAAajI,KAAK0F,MAAMuC,UACpCjI,KAAKgI,aAAahI,KAAK0F,MAAMuC,UAG3BL,KAAKC,UAAUwF,KAAezF,KAAKC,UAAU7H,KAAK0F,SAEpD1F,KAAK6L,eAAgB,I,EAkYzByB,OAAA,WAAU,IAAD,OACP,OACE,yBACEC,UAAWvN,KAAK0F,MAAM6H,UACtBrD,MAAK,eACH9E,QAAS,QACToI,WAAYxN,KAAK0F,MAAM+H,gBACvBC,YAAa,OACbrH,MAAOrG,KAAK0F,MAAMoC,YAClBxB,OAAQtG,KAAK0F,MAAMqC,cAChB/H,KAAK0F,MAAMwE,OAEhByD,IAAK,SAAAC,GACCA,IACF,EAAKC,gBAAkBD,KAG1BtI,EAAYkD,KAAI,YAAuB,IAApBjD,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAClBsI,EAAuB,cAATvI,EACpB,OACE,4BACEwI,IAAKxI,EACLoI,IAAK,SAAAvH,GACCA,IACF,EAAKA,OAAOb,GAAQa,EACpB,EAAKH,IAAIV,GAAQa,EAAO4H,WAAW,QAGvC3H,MAAO,EAAKX,MAAMoC,YAClBxB,OAAQ,EAAKZ,MAAMqC,aACnBmC,MAAK,iBAAO/E,EAAP,CAAoBK,WACzByI,YAAaH,EAAc,EAAKxE,qBAAkB4E,EAClDC,OAAQ,aACRC,YAAaN,EAAc,EAAKhE,oBAAiBoE,EACjDG,UAAWP,EAAc,EAAK/D,mBAAgBmE,EAC9CI,WAAYR,EAAc,EAAK/D,mBAAgBmE,EAC/CK,aAAcT,EAAc,EAAKxE,qBAAkB4E,EACnDM,YAAaV,EAAc,EAAKhE,oBAAiBoE,EACjDO,WAAYX,EAAc,EAAK/D,mBAAgBmE,EAC/CQ,cAAeZ,EAAc,EAAK/D,mBAAgBmE,S,GAlhBxBS,iBAAnBlJ,EAqBZmJ,aAAe,CACpBhD,SAAU,KACV7C,eAAgB,EAChB+D,WAAY,GACZlE,YAAa,GACbK,WAAY,OACZ0D,cAAe,UACfN,UAAW,yBACXoB,gBAAiB,OACjBtB,UAAU,EACVrE,YAAa,IACbC,aAAc,IACd4C,UAAU,EACV/E,OAAQ,GACRqC,SAAU,GACVC,kBAAkB,EAClBsE,eAAe,EACfd,YAAa,kBAAM,O,IClKFmD,E,oBAyBnB,WAAYnJ,GAAQ,IAAD,GACjB,cAAMA,IAAN,MAyEFwD,WAAa,YAA0C,IAAvCR,EAAsC,EAAtCA,OAAQO,EAA8B,EAA9BA,WAAYL,EAAkB,EAAlBA,YAClC,EAAK3C,IAAI8E,SAAW,QACpB,EAAK9E,IAAI+E,QAAU,QACnB,EAAK/E,IAAIgF,YAAchC,EAEvB,EAAKhD,IAAIkF,UAA0B,EAAdvC,EAErB,IAAIhG,EAAK8F,EAAO,GACZ7F,EAAK6F,EAAO,GAEhB,EAAKzC,IAAIrB,OAAO/B,EAAGlE,EAAGkE,EAAG9C,GACzB,EAAKkG,IAAImF,YAET,IAAK,IAAI1G,EAAI,EAAG2G,EAAM3C,EAAOzE,OAAQS,EAAI2G,EAAK3G,IAAK,CAGjD,IAAM4G,EAAW,CACf3M,EAAGiE,EAAGjE,GAAKkE,EAAGlE,EAAIiE,EAAGjE,GAAK,EAC1BoB,EAAG6C,EAAG7C,GAAK8C,EAAG9C,EAAI6C,EAAG7C,GAAK,GAE5B,EAAKkG,IAAIhB,iBAAiBrC,EAAGjE,EAAGiE,EAAG7C,EAAGuL,EAAS3M,EAAG2M,EAASvL,GAC3D6C,EAAK8F,EAAOhE,GACZ7B,EAAK6F,EAAOhE,EAAI,GAKlB,EAAKuB,IAAIpB,OAAOjC,EAAGjE,EAAGiE,EAAG7C,GACzB,EAAKkG,IAAIsF,UAtGQ,EAyGnBW,SAAW,WACT,IAAI,EAAKxG,MAAMyG,SAAf,CAIA,EAAKlG,IAAIiF,UAAU,EAAG,EAAG,EAAKjF,IAAIG,OAAOC,MAAO,EAAKJ,IAAIG,OAAOE,QAEhE,EAAKL,IAAImF,YACT,EAAKnF,IAAImG,YAAY,CAAC,EAAG,IACzB,EAAKnG,IAAImG,YAAY,IACrB,EAAKnG,IAAIgF,YAAc,EAAKvF,MAAM2G,UAClC,EAAKpG,IAAIkF,UAAY,GAKrB,IAHA,IAEImB,EAAS,EACNA,EAAS,EAAKrG,IAAIG,OAAOC,OAC9BiG,GAJe,GAKf,EAAKrG,IAAIrB,OAAO0H,EAAQ,GACxB,EAAKrG,IAAIpB,OAAOyH,EAAQ,EAAKrG,IAAIG,OAAOE,QAE1C,EAAKL,IAAIsF,SAGT,IADA,IAAIgB,EAAS,EACNA,EAAS,EAAKtG,IAAIG,OAAOE,QAC9BiG,GAZe,GAaf,EAAKtG,IAAIrB,OAAO,EAAG2H,GACnB,EAAKtG,IAAIpB,OAAO,EAAKoB,IAAIG,OAAOC,MAAOkG,GAEzC,EAAKtG,IAAIsF,SAET,EAAKtF,IAAImF,YACT,EAAKnF,IAAIkF,UAAY,EACrB,EAAKlF,IAAIrB,OAAO,EAAG,GACnB,EAAKqB,IAAIpB,OAAO,EAAG,EAAKoB,IAAIG,OAAOE,QACnC,EAAKL,IAAIpB,OAAO,EAAKoB,IAAIG,OAAOC,MAAO,EAAKJ,IAAIG,OAAOE,QACvD,EAAKL,IAAIpB,OAAO,EAAKoB,IAAIG,OAAOC,MAAO,GACvC,EAAKJ,IAAIpB,OAAO,EAAG,GACnB,EAAKoB,IAAIsF,WA5IT,EAAKnF,OAAS,KACd,EAAKH,IAAM,KAEX,EAAK6I,gBAAkB,EACvB,EAAKC,cAAgB,IACrB,EAAKC,YAAcC,MAAM,EAAKF,eAC9B,EAAKG,OAAS3Q,KAAKW,KACjBwG,EAAMyJ,aAAezJ,EAAMyJ,aAAezJ,EAAM0J,cAAgB1J,EAAM0J,eAGxE,EAAKC,SAAWJ,MAAM,EAAKF,eAC3B,EAAKO,SAAWL,MAAM,EAAKF,eAC3B,IACE,IAAIQ,EAAQ,EAAGC,EAAa,EAC5BA,EAAa,EAAKT,cAClBQ,GAAShR,KAAKiC,GAAK,EAAKuO,cAAeS,IAEvC,EAAKH,SAASG,GAAcjR,KAAKmC,IAAI6O,GACrC,EAAKD,SAASE,GAAcjR,KAAKkC,IAAI8O,GArBtB,S,kHA0BnBE,MAAA,SAAM9Q,EAAGoB,GACP,IACI2P,EADEC,EAAe,GAEjBH,EAAa,EAGjB,IAFA7Q,GAAKqB,KAAK0F,MAAMyJ,aAAe,EAC/BpP,GAAKC,KAAK0F,MAAM0J,cAAgB,EACzBI,EAAaxP,KAAK+O,cAAeS,GAAcxP,KAAK8O,gBACzDY,EAAM/Q,EAAIqB,KAAKqP,SAASG,GAAczP,EAAIC,KAAKsP,SAASE,QAEnBtB,IAAjClO,KAAKgP,YAAYQ,KACnBxP,KAAKgP,YAAYQ,GAAc,SAEStB,IAAtClO,KAAKgP,YAAYQ,GAAYE,GAC/B1P,KAAKgP,YAAYQ,GAAYE,GAAO,EAEpC1P,KAAKgP,YAAYQ,GAAYE,KAE/BC,EAAahL,KAAK,CAAE+K,IAAKA,EAAKH,MAAOC,IAGvC,OAAOG,G,EAGT9C,kBAAA,WACE7M,KAAK4P,gB,EAEPxC,mBAAA,WACEpN,KAAK4P,gB,EAEPA,aAAA,WAEE5P,KAAKiG,IAAIiF,UAAU,EAAG,EAAGlL,KAAKoG,OAAOC,MAAOrG,KAAKoG,OAAOE,QACxDtG,KAAKkM,Y,EAGP2D,gBAAA,YAA2B,IAAD,OAARlR,EAAQ,EAARA,EAAGoB,EAAK,EAALA,EACb2I,EAAS1I,KAAKyP,MAAM9Q,EAAGoB,GAAGyI,KAAI,SAAAG,GAAC,MAAK,CACxChK,EAAIgK,EAAE4G,OAAS,EAAK7J,MAAMoC,YAAc,EAAKgH,iBAAoB,EAAKC,cACtEhP,EAAI4I,EAAE+G,IAAM,EAAKhK,MAAMqC,aAAgB,EAAKmH,OAAS,EAAKxJ,MAAMqC,aAAe,MAGjF/H,KAAKkJ,WAAW,CACdR,OAAQA,EACRO,WAAYjJ,KAAK0F,MAAMuD,WACvBL,YAAa5I,KAAK0F,MAAMkD,e,EA4E5B0E,OAAA,WAAU,IAAD,OACP,OACE,yBACEC,UAAWvN,KAAK0F,MAAM6H,UACtBrD,MAAK,eACH9E,QAAS,QACToI,WAAYxN,KAAK0F,MAAM+H,gBACvBC,YAAa,OACbrH,MAAOrG,KAAK0F,MAAMoC,YAClBxB,OAAQtG,KAAK0F,MAAMqC,cAChB/H,KAAK0F,MAAMwE,QAEhB,4BACEyD,IAAK,SAAAvH,GACCA,IACF,EAAKA,OAASA,EACd,EAAKH,IAAMG,EAAO4H,WAAW,QAGjC3H,MAAOrG,KAAK0F,MAAMoC,YAClBxB,OAAQtG,KAAK0F,MAAMqC,iB,GA/LY+H,IAAMC,WAA1BlB,EAaZD,aAAe,CACpBhG,YAAa,GACbK,WAAY,OACZoD,UAAW,yBACXoB,gBAAiB,OACjBtB,UAAU,EACVrE,YAAa,IACbC,aAAc,IACdoH,aAAc,IACdC,cAAe,K,gEChBbY,EAAsBC,IAAOC,KAAV,uFAAGD,CAAH,ooBA2CnB,qBAAGE,MAAkBC,OAAOC,UAoFnBC,UA5EG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACfC,EAAa,KACqB,oBAAXpH,QAA0BA,OAAOqH,OAAOpK,OACjD,MAChBmK,EAAa,KAGf,IAEME,EAAiBC,iBAAO,MACxBC,EAAgBD,iBAAO,MACvBE,EAAcF,iBAAO,MAe3B,OAJAG,qBAAU,WACRC,IAAGC,OAAOH,EAAYI,QAASC,wBAC9B,IAGD,kBAAC,IAAD,CAAQX,SAAUA,GAChB,kBAACY,EAAA,EAAD,CAAQC,MAAM,oBACd,8BACE,kBAACpB,EAAD,KACE,yBAAKzC,UAAU,WACb,yBAAKA,UAAU,eAAerD,MAAO,CAAEmH,SAAUb,EAAa,KAC5D,yBAAKjD,UAAU,oBACb,kBAAC,EAAD,CACEA,UAAU,gBACVI,IAAKiD,EACLlF,YAxBI,SAAC,GAAc,IAAZ/M,EAAW,EAAXA,EAAGoB,EAAQ,EAARA,EACxB2Q,EAAeO,QAAQpB,gBAAgB,CAAElR,IAAGoB,OAwB9B+H,YAAa0I,EACbzI,aAAcyI,EACd5H,YAAa,EACbkE,WAAY,GACZT,UAnCE,2BAqCJ,kBAAC,EAAD,CACEkB,UAAU,gBACVI,IAAK+C,EACL5I,YAAa0I,EACbzI,aAAcyI,EACdrB,aAAcqB,EACdpB,cAAeoB,EACf5H,YAAa,EACbK,WAAW,wBACXoD,UA9CE,4BAiDN,4BAAQkB,UAAU,eAAe+D,QAvC/B,WACZZ,EAAeO,QAAQ/E,WACvB0E,EAAcK,QAAQ1J,UAsCT,IADH,QAEQ,MAGV,4BAAQoG,IAAKkD,GACX,wBAAItD,UAAU,WAAd,mBACA,uBAAGA,UAAU,SAAb,qD,qBC3Hd,IAAI1O,EAAU,EAAQ,QAClBL,EAAQ,EAAQ,QAChBI,EAAML,KAAKK,IAGfC,EAAQA,EAAQC,EAAID,EAAQQ,EAAI,EAAQ,OAAR,EAAoB,WAClD,OAA8B,QAAtBd,KAAKgG,MAAM,UACjB,OAAQ,CACVA,KAAM,SAAc5F,GAClB,OAAOJ,KAAK+F,IAAI3F,GAAKA,GAAK,GACrBH,EAAMG,GAAKH,GAAOG,IAAM,GACxBC,EAAID,EAAI,GAAKC,GAAKD,EAAI,KAAOJ,KAAKgT,EAAI","file":"component---src-pages-hough-transform-js-d1beecfb42c6a16ad16e.js","sourcesContent":["// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n","// 20.2.2.12 Math.cosh(x)\nvar $export = require('./_export');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n","// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n","// 20.2.2.3 Math.acosh(x)\nvar $export = require('./_export');\nvar log1p = require('./_math-log1p');\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","/**\n * origial author: Jan Hug <me@dulnan.net>\n * modified by: Arthur Findelair <arthfind@gmail.com>\n * repository: https://github.com/dulnan/lazy-brush\n * license: MIT Copyright (c) 2018 Jan Hug <me@dulnan.net>\n */\n\nclass Point {\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport default Point;\n","/**\n * origial author: Jan Hug <me@dulnan.net>\n * modified by: Arthur Findelair <arthfind@gmail.com>\n * repository: https://github.com/dulnan/lazy-brush\n * license: MIT Copyright (c) 2018 Jan Hug <me@dulnan.net>\n */\n\nimport Point from './Point';\n\nclass LazyPoint extends Point {\n  /**\n   * Update the x and y values\n   *\n   * @param {Point} point\n   */\n  update(point) {\n    this.x = point.x;\n    this.y = point.y;\n  }\n\n  /**\n   * Move the point to another position using an angle and distance\n   *\n   * @param {number} angle The angle in radians\n   * @param {number} distance How much the point should be moved\n   */\n  moveByAngle(angle, distance) {\n    // Rotate the angle based on the browser coordinate system ([0,0] in the top left)\n    const angleRotated = angle + Math.PI / 2;\n\n    this.x = this.x + Math.sin(angleRotated) * distance;\n    this.y = this.y - Math.cos(angleRotated) * distance;\n  }\n\n  /**\n   * Check if this point is the same as another point\n   *\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  equalsTo(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Get the difference for x and y axis to another point\n   *\n   * @param {Point} point\n   * @returns {Point}\n   */\n  getDifferenceTo(point) {\n    return new Point(this.x - point.x, this.y - point.y);\n  }\n\n  /**\n   * Calculate distance to another point\n   *\n   * @param {Point} point\n   * @returns {Point}\n   */\n  getDistanceTo(point) {\n    const diff = this.getDifferenceTo(point);\n\n    return Math.sqrt(Math.pow(diff.x, 2) + Math.pow(diff.y, 2));\n  }\n\n  /**\n   * Calculate the angle to another point\n   *\n   * @param {Point} point\n   * @returns {Point}\n   */\n  getAngleTo(point) {\n    const diff = this.getDifferenceTo(point);\n\n    return Math.atan2(diff.y, diff.x);\n  }\n\n  /**\n   * Return a simple object with x and y properties\n   *\n   * @returns {object}\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n    };\n  }\n}\n\nexport default LazyPoint;\n","/**\n * origial author: Jan Hug <me@dulnan.net>\n * modified by: Arthur Findelair <arthfind@gmail.com>\n * repository: https://github.com/dulnan/lazy-brush\n * license: MIT Copyright (c) 2018 Jan Hug <me@dulnan.net>\n */\n\nimport LazyPoint from './LazyPoint';\nconst RADIUS_DEFAULT = 30;\n\nclass LazyBrush {\n  /**\n   * constructor\n   *\n   * @param {object} settings\n   * @param {number} settings.radius The radius for the lazy area\n   * @param {boolean} settings.enabled\n   */\n  constructor({ radius = RADIUS_DEFAULT, enabled = true, initialPoint = { x: 0, y: 0 } } = {}) {\n    this.radius = radius;\n    this._isEnabled = enabled;\n\n    this.pointer = new LazyPoint(initialPoint.x, initialPoint.y);\n    this.brush = new LazyPoint(initialPoint.x, initialPoint.y);\n\n    this.angle = 0;\n    this.distance = 0;\n    this._hasMoved = false;\n  }\n\n  /**\n   * Enable lazy brush calculations.\n   *\n   */\n  enable() {\n    this._isEnabled = true;\n  }\n\n  /**\n   * Disable lazy brush calculations.\n   *\n   */\n  disable() {\n    this._isEnabled = false;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this._isEnabled;\n  }\n\n  /**\n   * Update the radius\n   *\n   * @param {number} radius\n   */\n  setRadius(radius) {\n    this.radius = radius;\n  }\n\n  /**\n   * Return the current radius\n   *\n   * @returns {number}\n   */\n  getRadius() {\n    return this.radius;\n  }\n\n  /**\n   * Return the brush coordinates as a simple object\n   *\n   * @returns {object}\n   */\n  getBrushCoordinates() {\n    return this.brush.toObject();\n  }\n\n  /**\n   * Return the pointer coordinates as a simple object\n   *\n   * @returns {object}\n   */\n  getPointerCoordinates() {\n    return this.pointer.toObject();\n  }\n\n  /**\n   * Return the brush as a LazyPoint\n   *\n   * @returns {LazyPoint}\n   */\n  getBrush() {\n    return this.brush;\n  }\n\n  /**\n   * Return the pointer as a LazyPoint\n   *\n   * @returns {LazyPoint}\n   */\n  getPointer() {\n    return this.pointer;\n  }\n\n  /**\n   * Return the angle between pointer and brush\n   *\n   * @returns {number} Angle in radians\n   */\n  getAngle() {\n    return this.angle;\n  }\n\n  /**\n   * Return the distance between pointer and brush\n   *\n   * @returns {number} Distance in pixels\n   */\n  getDistance() {\n    return this.distance;\n  }\n\n  /**\n   * Return if the previous update has moved the brush.\n   *\n   * @returns {boolean} Whether the brush moved previously.\n   */\n  brushHasMoved() {\n    return this._hasMoved;\n  }\n\n  /**\n   * Updates the pointer point and calculates the new brush point.\n   *\n   * @param {Point} newPointerPoint\n   * @param {Object} options\n   * @param {Boolean} options.both Force update pointer and brush\n   * @returns {Boolean} Whether any of the two points changed\n   */\n  update(newPointerPoint, { both = false } = {}) {\n    this._hasMoved = false;\n    if (this.pointer.equalsTo(newPointerPoint) && !both) {\n      return false;\n    }\n\n    this.pointer.update(newPointerPoint);\n\n    if (both) {\n      this._hasMoved = true;\n      this.brush.update(newPointerPoint);\n      return true;\n    }\n\n    if (this._isEnabled) {\n      this.distance = this.pointer.getDistanceTo(this.brush);\n      this.angle = this.pointer.getAngleTo(this.brush);\n\n      if (this.distance > this.radius) {\n        this.brush.moveByAngle(this.angle, this.distance - this.radius);\n        this._hasMoved = true;\n      }\n    } else {\n      this.distance = 0;\n      this.angle = 0;\n      this.brush.update(newPointerPoint);\n      this._hasMoved = true;\n    }\n\n    return true;\n  }\n}\n\nexport default LazyBrush;\n","class Point {\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Update the x and y values\n   *\n   * @param {Point} point\n   */\n  update(point) {\n    this.x = point.x;\n    this.y = point.y;\n  }\n\n  /**\n   * Get the difference for x and y axis to another point\n   *\n   * @param {Point} point\n   * @returns {Point}\n   */\n  getDifferenceTo(point) {\n    return new Point(this.x - point.x, this.y - point.y);\n  }\n\n  /**\n   * Calculate distance to another point\n   *\n   * @param {Point} point\n   * @returns {Point}\n   */\n  getDistanceTo(point) {\n    const diff = this.getDifferenceTo(point);\n\n    return Math.sqrt(Math.pow(diff.x, 2) + Math.pow(diff.y, 2));\n  }\n}\n\nexport default Point;\n","/**\n * Given two points and a length, calculate and draw the catenary.\n *\n * JavaScript implementation:\n * Copyright (c) 2018 Jan Hug <me@dulnan.net>\n * Released under the MIT license.\n *\n * ----------------------------------------------------------------------------\n *\n * Original ActionScript implementation:\n * Copyright poiasd ( http://wonderfl.net/user/poiasd )\n * MIT License ( http://www.opensource.org/licenses/mit-license.php )\n * Downloaded from: http://wonderfl.net/c/8Bnl\n *\n * ----------------------------------------------------------------------------\n *\n * Archived by and downloaded from:\n * http://wa.zozuar.org/code.php?c=8Bnl\n */\nimport Point from './Point';\n\nconst EPSILON = 1e-6;\n\nclass Catenary {\n  /**\n   * constructor\n   *\n   * @param {Object} settings\n   * @param {Number} settings.segments Number of segments of the chain.\n   * @param {Number} settings.iterationLimit Maximum amount iterations for getting catenary parameters.\n   */\n  constructor({ segments = 50, iterationLimit = 100 } = {}) {\n    this.p1 = new Point();\n    this.p2 = new Point();\n\n    this.segments = segments;\n    this.iterationLimit = iterationLimit;\n  }\n\n  /**\n   * Draws a catenary given two coordinates, a length and a context.\n   *\n   * @param {CanvasRenderingContext2D} context The canvas context to draw the catenary on to.\n   * @param {Point} p1 First point\n   * @param {Point} p2 Second point\n   * @param {Number} chainLength The length of the catenary\n   */\n  drawToCanvas(context, point1, point2, chainLength) {\n    this.p1.update(point1);\n    this.p2.update(point2);\n\n    const isFlipped = this.p1.x > this.p2.x;\n\n    const p1 = isFlipped ? this.p2 : this.p1;\n    const p2 = isFlipped ? this.p1 : this.p2;\n\n    const distance = p1.getDistanceTo(p2);\n\n    let curveData = [];\n    let isStraight = true;\n\n    // Prevent \"expensive\" catenary calculations if it would only result\n    // in a straight line.\n    if (distance < chainLength) {\n      const diff = p2.x - p1.x;\n\n      // If the distance on the x axis of both points is too small, don't\n      // calculate a catenary.\n      if (diff > 0.01) {\n        const h = p2.x - p1.x;\n        const v = p2.y - p1.y;\n        const a = -this.getCatenaryParameter(h, v, chainLength, this.iterationLimit);\n        const x = (a * Math.log((chainLength + v) / (chainLength - v)) - h) * 0.5;\n        const y = a * Math.cosh(x / a);\n        const offsetX = p1.x - x;\n        const offsetY = p1.y - y;\n        curveData = this.getCurve(a, p1, p2, offsetX, offsetY, this.segments);\n        isStraight = false;\n      } else {\n        const mx = (p1.x + p2.x) * 0.5;\n        const my = (p1.y + p2.y + chainLength) * 0.5;\n\n        curveData = [\n          [p1.x, p1.y],\n          [mx, my],\n          [p2.x, p2.y],\n        ];\n      }\n    } else {\n      curveData = [\n        [p1.x, p1.y],\n        [p2.x, p2.y],\n      ];\n    }\n\n    if (isStraight) {\n      this.drawLine(curveData, context);\n    } else {\n      this.drawCurve(curveData, context);\n    }\n\n    return curveData;\n  }\n\n  /**\n   * Determines catenary parameter.\n   *\n   * @param {Number} h Horizontal distance of both points.\n   * @param {Number} v Vertical distance of both points.\n   * @param {Number} length The catenary length.\n   * @param {Number} limit Maximum amount of iterations to find parameter.\n   */\n  getCatenaryParameter(h, v, length, limit) {\n    const m = Math.sqrt(length * length - v * v) / h;\n    let x = Math.acosh(m) + 1;\n    let prevx = -1;\n    let count = 0;\n\n    while (Math.abs(x - prevx) > EPSILON && count < limit) {\n      prevx = x;\n      x = x - (Math.sinh(x) - m * x) / (Math.cosh(x) - m);\n      count++;\n    }\n\n    return h / (2 * x);\n  }\n\n  /**\n   * Calculate the catenary curve.\n   * Increasing the segments value will produce a catenary closer\n   * to reality, but will require more calcluations.\n   *\n   * @param {Number} a The catenary parameter.\n   * @param {Point} p1 First point\n   * @param {Point} p2 Second point\n   * @param {Number} offsetX The calculated offset on the x axis.\n   * @param {Number} offsetY The calculated offset on the y axis.\n   * @param {Number} segments How many \"parts\" the chain should be made of.\n   */\n  getCurve(a, p1, p2, offsetX, offsetY, segments) {\n    const data = [p1.x, a * Math.cosh((p1.x - offsetX) / a) + offsetY];\n\n    const d = p2.x - p1.x;\n    const length = segments - 1;\n\n    for (let i = 0; i < length; i++) {\n      const x = p1.x + (d * (i + 0.5)) / length;\n      const y = a * Math.cosh((x - offsetX) / a) + offsetY;\n      data.push(x, y);\n    }\n\n    data.push(p2.x, a * Math.cosh((p2.x - offsetX) / a) + offsetY);\n\n    return data;\n  }\n\n  /**\n   * Draws a straight line between two points.\n   *\n   * @param {Array} data Even indices are x, odd are y.\n   * @param {CanvasRenderingContext2D} context The context to draw to.\n   */\n  drawLine(data, context) {\n    context.moveTo(data[0][0], data[0][1]);\n\n    context.lineTo(data[1][0], data[1][1]);\n  }\n\n  /**\n   * Draws a quadratic curve between every calculated catenary segment,\n   * so that the segments don't look like straight lines.\n   *\n   * @param {Array} data Even indices are x, odd are y.\n   * @param {CanvasRenderingContext2D} context The context to draw to.\n   *\n   * @returns {Array} The original segment coordinates.\n   */\n  drawCurve(data, context) {\n    let length = data.length * 0.5 - 1;\n    let ox = data[2];\n    let oy = data[3];\n\n    const temp = [];\n\n    context.moveTo(data[0], data[1]);\n\n    for (let i = 2; i < length; i++) {\n      const x = data[i * 2];\n      const y = data[i * 2 + 1];\n      const mx = (x + ox) * 0.5;\n      const my = (y + oy) * 0.5;\n      temp.push([ox, oy, mx, my]);\n      context.quadraticCurveTo(ox, oy, mx, my);\n      ox = x;\n      oy = y;\n    }\n\n    length = data.length;\n    context.quadraticCurveTo(\n      data[length - 4],\n      data[length - 3],\n      data[length - 2],\n      data[length - 1],\n    );\n\n    return temp;\n  }\n}\n\nexport default Catenary;\n","/**\n * origial author: Martin Beierling <mbeierling@gmail.com>\n * modified by: Arthur Findelair <arthfind@gmail.com>\n * repository: https://github.com/embiem/react-canvas-draw\n * license: MIT Copyright (c) 2018 Martin Beierling\n */\n\n/* eslint-disable react/prop-types */ // TODO: upgrade to latest eslint tooling\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { LazyBrush } from './lazy-brush';\nimport { Catenary } from './catenary-curve';\n\nfunction drawImage({ ctx, img, x, y, w, h, offsetX, offsetY } = {}) {\n  // Defaults\n  if (typeof x !== 'number') {\n    x = 0;\n  }\n  if (typeof y !== 'number') {\n    y = 0;\n  }\n  if (typeof w !== 'number') {\n    w = ctx.canvas.width;\n  }\n  if (typeof h !== 'number') {\n    h = ctx.canvas.height;\n  }\n  if (typeof offsetX !== 'number') {\n    offsetX = 0.5;\n  }\n  if (typeof offsetY !== 'number') {\n    offsetY = 0.5;\n  }\n\n  // keep bounds [0.0, 1.0]\n  if (offsetX < 0) {\n    offsetX = 0;\n  }\n  if (offsetY < 0) {\n    offsetY = 0;\n  }\n  if (offsetX > 1) {\n    offsetX = 1;\n  }\n  if (offsetY > 1) {\n    offsetY = 1;\n  }\n\n  const iw = img.width;\n  const ih = img.height;\n  const r = Math.min(w / iw, h / ih);\n  let nw = iw * r; // new prop. width\n  let nh = ih * r; // new prop. height\n  let cx;\n  let cy;\n  let cw;\n  let ch;\n  let ar = 1;\n\n  // decide which gap to fill\n  if (nw < w) {\n    ar = w / nw;\n  }\n  if (Math.abs(ar - 1) < 1e-14 && nh < h) {\n    ar = h / nh;\n  } // updated\n  nw *= ar;\n  nh *= ar;\n\n  // calc source rectangle\n  cw = iw / (nw / w);\n  ch = ih / (nh / h);\n\n  cx = (iw - cw) * offsetX;\n  cy = (ih - ch) * offsetY;\n\n  // make sure source rectangle is valid\n  if (cx < 0) {\n    cx = 0;\n  }\n  if (cy < 0) {\n    cy = 0;\n  }\n  if (cw > iw) {\n    cw = iw;\n  }\n  if (ch > ih) {\n    ch = ih;\n  }\n\n  // fill image in dest. rectangle\n  ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);\n}\n\nfunction midPointBtw(p1, p2) {\n  return {\n    x: p1.x + (p2.x - p1.x) / 2,\n    y: p1.y + (p2.y - p1.y) / 2,\n  };\n}\n\nconst canvasStyle = {\n  display: 'block',\n  position: 'absolute',\n};\n\nconst canvasTypes = [\n  {\n    name: 'interface',\n    zIndex: 15,\n  },\n  {\n    name: 'drawing',\n    zIndex: 11,\n  },\n  {\n    name: 'temp',\n    zIndex: 12,\n  },\n  {\n    name: 'grid',\n    zIndex: 10,\n  },\n];\n\nconst dimensionsPropTypes = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\n\nexport default class CanvasDraw extends PureComponent {\n  static propTypes = {\n    onChange: PropTypes.func,\n    loadTimeOffset: PropTypes.number,\n    lazyRadius: PropTypes.number,\n    brushRadius: PropTypes.number,\n    brushColor: PropTypes.string,\n    catenaryColor: PropTypes.string,\n    gridColor: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    hideGrid: PropTypes.bool,\n    canvasWidth: dimensionsPropTypes,\n    canvasHeight: dimensionsPropTypes,\n    disabled: PropTypes.bool,\n    imgSrc: PropTypes.string,\n    saveData: PropTypes.string,\n    immediateLoading: PropTypes.bool,\n    hideInterface: PropTypes.bool,\n    onPointDraw: PropTypes.func,\n  };\n\n  static defaultProps = {\n    onChange: null,\n    loadTimeOffset: 5,\n    lazyRadius: 12,\n    brushRadius: 10,\n    brushColor: '#444',\n    catenaryColor: '#0a0302',\n    gridColor: 'rgba(150,150,150,0.17)',\n    backgroundColor: '#FFF',\n    hideGrid: false,\n    canvasWidth: 400,\n    canvasHeight: 400,\n    disabled: false,\n    imgSrc: '',\n    saveData: '',\n    immediateLoading: false,\n    hideInterface: false,\n    onPointDraw: () => null,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = {};\n    this.ctx = {};\n\n    this.catenary = new Catenary();\n\n    this.points = [];\n    this.lines = [];\n\n    this.mouseHasMoved = true;\n    this.valuesChanged = true;\n    this.isDrawing = false;\n    this.isPressing = false;\n\n    this.currentPositionX = 0;\n    this.currentPositionY = 0;\n  }\n\n  componentDidMount() {\n    this.lazy = new LazyBrush({\n      radius: this.props.lazyRadius * window.devicePixelRatio,\n      enabled: true,\n      initialPoint: {\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2,\n      },\n    });\n    this.chainLength = this.props.lazyRadius * window.devicePixelRatio;\n\n    this.drawImage();\n    this.drawGrid(this.ctx.grid);\n    this.loop();\n\n    window.setTimeout(() => {\n      const initX = window.innerWidth / 2;\n      const initY = window.innerHeight / 2;\n      this.lazy.update({ x: initX - this.chainLength / 4, y: initY }, { both: true });\n      this.lazy.update({ x: initX + this.chainLength / 4, y: initY }, { both: false });\n      this.mouseHasMoved = true;\n      this.valuesChanged = true;\n      this.clear();\n\n      // Load saveData from prop if it exists\n      if (this.props.saveData) {\n        this.loadSaveData(this.props.saveData);\n      }\n    }, 100);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.lazyRadius !== this.props.lazyRadius) {\n      // Set new lazyRadius values\n      this.chainLength = this.props.lazyRadius * window.devicePixelRatio;\n      this.lazy.setRadius(this.props.lazyRadius * window.devicePixelRatio);\n    }\n\n    if (prevProps.saveData !== this.props.saveData) {\n      this.loadSaveData(this.props.saveData);\n    }\n\n    if (JSON.stringify(prevProps) !== JSON.stringify(this.props)) {\n      // Signal this.loop function that values changed\n      this.valuesChanged = true;\n    }\n  }\n\n  drawImage = () => {\n    if (!this.props.imgSrc) {\n      return;\n    }\n\n    // Load the image\n    this.image = new Image();\n\n    // Prevent SecurityError \"Tainted canvases may not be exported.\" #70\n    this.image.crossOrigin = 'anonymous';\n\n    // Draw the image once loaded\n    this.image.onload = () => drawImage({ ctx: this.ctx.grid, img: this.image });\n    this.image.src = this.props.imgSrc;\n  };\n\n  undo = () => {\n    const lines = this.lines.slice(0, -1);\n    this.clear();\n    this.simulateDrawingLines({ lines, immediate: true });\n    this.triggerOnChange();\n  };\n\n  getSaveData = () =>\n    // Construct and return the stringified saveData object\n    JSON.stringify({\n      lines: this.lines,\n      width: this.props.canvasWidth,\n      height: this.props.canvasHeight,\n    });\n\n  loadSaveData = (saveData, immediate = this.props.immediateLoading) => {\n    if (typeof saveData !== 'string') {\n      throw new Error('saveData needs to be of type string!');\n    }\n\n    const { lines, width, height } = JSON.parse(saveData);\n\n    if (!lines || typeof lines.push !== 'function') {\n      throw new Error('saveData.lines needs to be an array!');\n    }\n\n    this.clear();\n\n    if (width === this.props.canvasWidth && height === this.props.canvasHeight) {\n      this.simulateDrawingLines({\n        lines,\n        immediate,\n      });\n    } else {\n      // we need to rescale the lines based on saved & current dimensions\n      const scaleX = this.props.canvasWidth / width;\n      const scaleY = this.props.canvasHeight / height;\n      const scaleAvg = (scaleX + scaleY) / 2;\n\n      this.simulateDrawingLines({\n        lines: lines.map(line => ({\n          ...line,\n          points: line.points.map(p => ({\n            x: p.x * scaleX,\n            y: p.y * scaleY,\n          })),\n          brushRadius: line.brushRadius * scaleAvg,\n        })),\n        immediate,\n      });\n    }\n  };\n\n  simulateDrawingLines = ({ lines, immediate }) => {\n    // Simulate live-drawing of the loaded lines\n    // TODO use a generator\n    let curTime = 0;\n    const timeoutGap = immediate ? 0 : this.props.loadTimeOffset;\n\n    lines.forEach(line => {\n      const { points, brushColor, brushRadius } = line;\n\n      // Draw all at once if immediate flag is set, instead of using setTimeout\n      if (immediate) {\n        // Draw the points\n        this.drawPoints({\n          points,\n          brushColor,\n          brushRadius,\n        });\n\n        // Save line with the drawn points\n        this.points = points;\n        this.saveLine({ brushColor, brushRadius });\n        return;\n      }\n\n      // Use timeout to draw\n      for (let i = 1; i < points.length; i++) {\n        curTime += timeoutGap;\n        window.setTimeout(() => {\n          this.drawPoints({\n            points: points.slice(0, i + 1),\n            brushColor,\n            brushRadius,\n          });\n        }, curTime);\n      }\n\n      curTime += timeoutGap;\n      window.setTimeout(() => {\n        // Save this line with its props instead of this.props\n        this.points = points;\n        this.saveLine({ brushColor, brushRadius });\n      }, curTime);\n    });\n  };\n\n  handleDrawStart = e => {\n    e.preventDefault();\n\n    // Start drawing\n    this.isPressing = true;\n\n    const { x, y } = this.getPointerPos(e);\n\n    if (e.touches && e.touches.length > 0) {\n      // on touch, set catenary position to touch pos\n      this.lazy.update({ x, y }, { both: true });\n    }\n\n    // Ensure the initial down position gets added to our line\n    this.handlePointerMove(x, y);\n  };\n\n  handleDrawMove = e => {\n    e.preventDefault();\n\n    const { x, y } = this.getPointerPos(e);\n    this.handlePointerMove(x, y);\n  };\n\n  handleDrawEnd = e => {\n    e.preventDefault();\n\n    // Draw to this end pos\n    this.handleDrawMove(e);\n\n    // Stop drawing & save the drawn line\n    this.isDrawing = false;\n    this.isPressing = false;\n    this.saveLine();\n  };\n\n  setCanvasSize = (canvas, width, height) => {\n    canvas.width = width;\n    canvas.height = height;\n    canvas.style.width = width;\n    canvas.style.height = height;\n  };\n\n  getPointerPos = e => {\n    const rect = this.canvas.interface.getBoundingClientRect();\n\n    // use cursor pos as default\n    let clientX = e.clientX;\n    let clientY = e.clientY;\n\n    // use first touch if available\n    if (e.changedTouches && e.changedTouches.length > 0) {\n      clientX = e.changedTouches[0].clientX;\n      clientY = e.changedTouches[0].clientY;\n    }\n\n    // return mouse/touch position inside canvas\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top,\n    };\n  };\n\n  handlePointerMove = (x, y) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.lazy.update({ x, y });\n    const isDisabled = !this.lazy.isEnabled();\n\n    if ((this.isPressing && !this.isDrawing) || (isDisabled && this.isPressing)) {\n      // Start drawing and add point\n      this.isDrawing = true;\n      this.points.push(this.lazy.brush.toObject());\n    }\n\n    if (this.isDrawing) {\n      // Add new point\n      this.points.push(this.lazy.brush.toObject());\n\n      // Draw current points\n      this.drawPoints({\n        points: this.points,\n        brushColor: this.props.brushColor,\n        brushRadius: this.props.brushRadius,\n      });\n\n      // Send update\n      this.updateCurrentPoint({ x, y });\n    }\n\n    this.mouseHasMoved = true;\n  };\n\n  drawPoints = ({ points, brushColor, brushRadius }) => {\n    this.ctx.temp.lineJoin = 'round';\n    this.ctx.temp.lineCap = 'round';\n    this.ctx.temp.strokeStyle = brushColor;\n\n    this.ctx.temp.clearRect(0, 0, this.ctx.temp.canvas.width, this.ctx.temp.canvas.height);\n    this.ctx.temp.lineWidth = brushRadius * 2;\n\n    let p1 = points[0];\n    let p2 = points[1];\n\n    this.ctx.temp.moveTo(p2.x, p2.y);\n    this.ctx.temp.beginPath();\n\n    for (let i = 1, len = points.length; i < len; i++) {\n      // we pick the point between pi+1 & pi+2 as the\n      // end point and p1 as our control point\n      const midPoint = midPointBtw(p1, p2);\n      this.ctx.temp.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n      p1 = points[i];\n      p2 = points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    this.ctx.temp.lineTo(p1.x, p1.y);\n    this.ctx.temp.stroke();\n  };\n\n  updateCurrentPoint = ({ x, y }) => {\n    x = x | 0; // Truncate to integer\n    y = y | 0;\n    if (!(x === this.currentPositionX && y === this.currentPositionY)) {\n      this.currentPositionX = x;\n      this.currentPositionY = y;\n      //console.log(x,y);\n      this.props.onPointDraw({ x: x, y: y });\n    }\n  };\n\n  saveLine = ({ brushColor, brushRadius } = {}) => {\n    if (this.points.length < 2) {\n      return;\n    }\n\n    // Save as new line\n    this.lines.push({\n      points: [...this.points],\n      brushColor: brushColor || this.props.brushColor,\n      brushRadius: brushRadius || this.props.brushRadius,\n    });\n\n    // Reset points array\n    this.points.length = 0;\n\n    const width = this.canvas.temp.width;\n    const height = this.canvas.temp.height;\n\n    // Copy the line to the drawing canvas\n    this.ctx.drawing.drawImage(this.canvas.temp, 0, 0, width, height);\n\n    // Clear the temporary line-drawing canvas\n    this.ctx.temp.clearRect(0, 0, width, height);\n\n    this.triggerOnChange();\n  };\n\n  triggerOnChange = () => {\n    this.props.onChange && this.props.onChange(this);\n  };\n\n  clear = () => {\n    this.lines = [];\n    this.valuesChanged = true;\n    this.ctx.drawing.clearRect(0, 0, this.canvas.drawing.width, this.canvas.drawing.height);\n    this.ctx.temp.clearRect(0, 0, this.canvas.temp.width, this.canvas.temp.height);\n  };\n\n  loop = ({ once = false } = {}) => {\n    if (this.mouseHasMoved || this.valuesChanged) {\n      const pointer = this.lazy.getPointerCoordinates();\n      const brush = this.lazy.getBrushCoordinates();\n\n      this.drawInterface(this.ctx.interface, pointer, brush);\n      this.mouseHasMoved = false;\n      this.valuesChanged = false;\n    }\n\n    if (!once) {\n      window.requestAnimationFrame(() => {\n        this.loop();\n      });\n    }\n  };\n\n  drawGrid = ctx => {\n    if (this.props.hideGrid) {\n      return;\n    }\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    ctx.beginPath();\n    ctx.setLineDash([5, 1]);\n    ctx.setLineDash([]);\n    ctx.strokeStyle = this.props.gridColor;\n    ctx.lineWidth = 0.5;\n\n    const gridSize = 25;\n\n    let countX = 0;\n    while (countX < ctx.canvas.width) {\n      countX += gridSize;\n      ctx.moveTo(countX, 0);\n      ctx.lineTo(countX, ctx.canvas.height);\n    }\n    ctx.stroke();\n\n    let countY = 0;\n    while (countY < ctx.canvas.height) {\n      countY += gridSize;\n      ctx.moveTo(0, countY);\n      ctx.lineTo(ctx.canvas.width, countY);\n    }\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.lineWidth = 3;\n    ctx.moveTo(0, 0);\n    ctx.lineTo(0, ctx.canvas.height);\n    ctx.lineTo(ctx.canvas.width, ctx.canvas.height);\n    ctx.lineTo(ctx.canvas.width, 0);\n    ctx.lineTo(0, 0);\n    ctx.stroke();\n  };\n\n  drawInterface = (ctx, pointer, brush) => {\n    if (this.props.hideInterface) {\n      return;\n    }\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Draw brush preview\n    ctx.beginPath();\n    ctx.fillStyle = this.props.brushColor;\n    ctx.arc(brush.x, brush.y, this.props.brushRadius, 0, Math.PI * 2, true);\n    ctx.fill();\n\n    // Draw mouse point (the one directly at the cursor)\n    ctx.beginPath();\n    ctx.fillStyle = this.props.catenaryColor;\n    ctx.arc(pointer.x, pointer.y, 4, 0, Math.PI * 2, true);\n    ctx.fill();\n\n    // Draw catenary\n    if (this.lazy.isEnabled()) {\n      ctx.beginPath();\n      ctx.lineWidth = 2;\n      ctx.lineCap = 'round';\n      ctx.setLineDash([2, 4]);\n      ctx.strokeStyle = this.props.catenaryColor;\n      this.catenary.drawToCanvas(this.ctx.interface, brush, pointer, this.chainLength);\n      ctx.stroke();\n    }\n\n    // Draw brush point (the one in the middle of the brush preview)\n    ctx.beginPath();\n    ctx.fillStyle = this.props.catenaryColor;\n    ctx.arc(brush.x, brush.y, 2, 0, Math.PI * 2, true);\n    ctx.fill();\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        style={{\n          display: 'block',\n          background: this.props.backgroundColor,\n          touchAction: 'none',\n          width: this.props.canvasWidth,\n          height: this.props.canvasHeight,\n          ...this.props.style,\n        }}\n        ref={container => {\n          if (container) {\n            this.canvasContainer = container;\n          }\n        }}>\n        {canvasTypes.map(({ name, zIndex }) => {\n          const isInterface = name === 'interface';\n          return (\n            <canvas\n              key={name}\n              ref={canvas => {\n                if (canvas) {\n                  this.canvas[name] = canvas;\n                  this.ctx[name] = canvas.getContext('2d');\n                }\n              }}\n              width={this.props.canvasWidth}\n              height={this.props.canvasHeight}\n              style={{ ...canvasStyle, zIndex }}\n              onMouseDown={isInterface ? this.handleDrawStart : undefined}\n              onBlur={() => void 0}\n              onMouseMove={isInterface ? this.handleDrawMove : undefined}\n              onMouseUp={isInterface ? this.handleDrawEnd : undefined}\n              onMouseOut={isInterface ? this.handleDrawEnd : undefined}\n              onTouchStart={isInterface ? this.handleDrawStart : undefined}\n              onTouchMove={isInterface ? this.handleDrawMove : undefined}\n              onTouchEnd={isInterface ? this.handleDrawEnd : undefined}\n              onTouchCancel={isInterface ? this.handleDrawEnd : undefined}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'; // TODO: upgrade to latest eslint tooling\n\n/* eslint-disable react/prop-types */\nexport default class CanvasHough extends React.Component {\n  static propTypes = {\n    brushRadius: PropTypes.number,\n    brushColor: PropTypes.string,\n    gridColor: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    hideGrid: PropTypes.bool,\n    canvasWidth: PropTypes.number,\n    canvasHeight: PropTypes.number,\n    drawingWidth: PropTypes.number,\n    drawingHeight: PropTypes.number,\n  };\n\n  static defaultProps = {\n    brushRadius: 10,\n    brushColor: '#444',\n    gridColor: 'rgba(150,150,150,0.17)',\n    backgroundColor: '#FFF',\n    hideGrid: false,\n    canvasWidth: 400,\n    canvasHeight: 400,\n    drawingWidth: 400,\n    drawingHeight: 400,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = null;\n    this.ctx = null;\n\n    this.houghThetaDelta = 4;\n    this.numAngleCells = 360;\n    this.hough_accum = Array(this.numAngleCells);\n    this.rhoMax = Math.sqrt(\n      props.drawingWidth * props.drawingWidth + props.drawingHeight * props.drawingHeight,\n    );\n\n    this.cosTable = Array(this.numAngleCells);\n    this.sinTable = Array(this.numAngleCells);\n    for (\n      let theta = 0, thetaIndex = 0;\n      thetaIndex < this.numAngleCells;\n      theta += Math.PI / this.numAngleCells, thetaIndex++\n    ) {\n      this.cosTable[thetaIndex] = Math.cos(theta);\n      this.sinTable[thetaIndex] = Math.sin(theta);\n    }\n  }\n\n  // Implementation with lookup tables.\n  hough(x, y) {\n    const curve_points = [];\n    let rho;\n    let thetaIndex = 0;\n    x -= this.props.drawingWidth / 2;\n    y -= this.props.drawingHeight / 2;\n    for (; thetaIndex < this.numAngleCells; thetaIndex += this.houghThetaDelta) {\n      rho = x * this.cosTable[thetaIndex] + y * this.sinTable[thetaIndex];\n      //rho >>= 1;\n      if (this.hough_accum[thetaIndex] === undefined) {\n        this.hough_accum[thetaIndex] = [];\n      }\n      if (this.hough_accum[thetaIndex][rho] === undefined) {\n        this.hough_accum[thetaIndex][rho] = 1;\n      } else {\n        this.hough_accum[thetaIndex][rho]++;\n      }\n      curve_points.push({ rho: rho, theta: thetaIndex });\n      //drawInHough(rho,thetaIndex);\n    }\n    return curve_points;\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n  updateCanvas() {\n    //const ctx = this.refs.canvas.getContext('2d');\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.drawGrid();\n  }\n\n  drawHoughPoints({ x, y }) {\n    const points = this.hough(x, y).map(p => ({\n      x: (p.theta * (this.props.canvasWidth + this.houghThetaDelta)) / this.numAngleCells,\n      y: (p.rho * this.props.canvasHeight) / this.rhoMax + this.props.canvasHeight / 2,\n    }));\n    //console.log(points);\n    this.drawPoints({\n      points: points,\n      brushColor: this.props.brushColor,\n      brushRadius: this.props.brushRadius,\n    });\n  }\n\n  drawPoints = ({ points, brushColor, brushRadius }) => {\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.ctx.strokeStyle = brushColor;\n\n    this.ctx.lineWidth = brushRadius * 2;\n\n    let p1 = points[0];\n    let p2 = points[1];\n\n    this.ctx.moveTo(p2.x, p2.y);\n    this.ctx.beginPath();\n\n    for (let i = 1, len = points.length; i < len; i++) {\n      // we pick the point between pi+1 & pi+2 as the\n      // end point and p1 as our control point\n      const midPoint = {\n        x: p1.x + (p2.x - p1.x) / 2,\n        y: p1.y + (p2.y - p1.y) / 2,\n      };\n      this.ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n      p1 = points[i];\n      p2 = points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    this.ctx.lineTo(p1.x, p1.y);\n    this.ctx.stroke();\n  };\n\n  drawGrid = () => {\n    if (this.props.hideGrid) {\n      return;\n    }\n\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n\n    this.ctx.beginPath();\n    this.ctx.setLineDash([5, 1]);\n    this.ctx.setLineDash([]);\n    this.ctx.strokeStyle = this.props.gridColor;\n    this.ctx.lineWidth = 0.5;\n\n    const gridSize = 25;\n\n    let countX = 0;\n    while (countX < this.ctx.canvas.width) {\n      countX += gridSize;\n      this.ctx.moveTo(countX, 0);\n      this.ctx.lineTo(countX, this.ctx.canvas.height);\n    }\n    this.ctx.stroke();\n\n    let countY = 0;\n    while (countY < this.ctx.canvas.height) {\n      countY += gridSize;\n      this.ctx.moveTo(0, countY);\n      this.ctx.lineTo(this.ctx.canvas.width, countY);\n    }\n    this.ctx.stroke();\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 3;\n    this.ctx.moveTo(0, 0);\n    this.ctx.lineTo(0, this.ctx.canvas.height);\n    this.ctx.lineTo(this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.lineTo(this.ctx.canvas.width, 0);\n    this.ctx.lineTo(0, 0);\n    this.ctx.stroke();\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        style={{\n          display: 'block',\n          background: this.props.backgroundColor,\n          touchAction: 'none',\n          width: this.props.canvasWidth,\n          height: this.props.canvasHeight,\n          ...this.props.style,\n        }}>\n        <canvas\n          ref={canvas => {\n            if (canvas) {\n              this.canvas = canvas;\n              this.ctx = canvas.getContext('2d');\n            }\n          }}\n          width={this.props.canvasWidth}\n          height={this.props.canvasHeight}\n        />\n      </div>\n    );\n  }\n}\n","import React, { useRef, useEffect } from 'react';\nimport CanvasDraw from '../components/hough-transform/canvas-draw/canvasdraw.js';\nimport CanvasHough from '../components/hough-transform/canvashough';\nimport { Layout } from '@components';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport sr from '@utils/sr';\nimport PropTypes from 'prop-types';\nimport { srConfig } from '@config';\n\nconst StyledMainContainer = styled.main`\n  margin: -300px 0;\n  @media (max-width: 768px) {\n    margin: -200px 0;\n  }\n  @media (max-width: 480px) {\n    margin: -180px 0;\n  }\n  h1 {\n    margin: 10vh 0 15px 5px;\n  }\n\n  .content {\n    -o-object-fit: contain;\n    object-fit: contain;\n  }\n\n  .canvas-container {\n    -o-object-fit: contain;\n    object-fit: contain;\n    display: flex;\n    flex-wrap: wrap-reverse;\n    justify-content: space-evenly;\n    align-items: center;\n  }\n\n  .hover-window {\n    margin-top: 30px;\n    padding-top: 0;\n    padding-bottom: 1%;\n    box-shadow: 0px 0px 30px rgba(10, 10, 10, 0.7);\n    -o-object-fit: contain;\n    object-fit: contain;\n    border-radius: 1.5%;\n    background-color: #fff;\n  }\n\n  .canvas-custom {\n    margin-top: 2%;\n    margin-bottom: 2%;\n  }\n\n  .clear-button {\n    ${({ theme }) => theme.mixins.button};\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    padding: 10px;\n  }\n`;\n\nconst HoughPage = ({ location }) => {\n  let canvasSize = 360;\n  const screenWidth = typeof window !== 'undefined' && window.screen.width;\n  if (screenWidth < 480) {\n    canvasSize = 250;\n  }\n\n  const gridColor = 'rgba(150,150,150,0.17)';\n\n  const houghCanvasRef = useRef(null);\n  const drawCanvasRef = useRef(null);\n  const revealTitle = useRef(null);\n\n  const onPointDraw = ({ x, y }) => {\n    houghCanvasRef.current.drawHoughPoints({ x, y });\n  };\n\n  const clear = () => {\n    houghCanvasRef.current.drawGrid();\n    drawCanvasRef.current.clear();\n  };\n\n  useEffect(() => {\n    sr.reveal(revealTitle.current, srConfig());\n  }, []);\n\n  return (\n    <Layout location={location}>\n      <Helmet title=\"Hough Transform\" />\n      <main>\n        <StyledMainContainer>\n          <div className=\"content\">\n            <div className=\"hover-window\" style={{ minWidth: canvasSize + 10 }}>\n              <div className=\"canvas-container\">\n                <CanvasDraw\n                  className=\"canvas-custom\"\n                  ref={drawCanvasRef}\n                  onPointDraw={onPointDraw}\n                  canvasWidth={canvasSize}\n                  canvasHeight={canvasSize}\n                  brushRadius={1}\n                  lazyRadius={10}\n                  gridColor={gridColor}\n                />\n                <CanvasHough\n                  className=\"canvas-custom\"\n                  ref={houghCanvasRef}\n                  canvasWidth={canvasSize}\n                  canvasHeight={canvasSize}\n                  drawingWidth={canvasSize}\n                  drawingHeight={canvasSize}\n                  brushRadius={1}\n                  brushColor=\"rgba(0, 24, 78, 0.15)\"\n                  gridColor={gridColor}\n                />\n              </div>\n              <button className=\"clear-button\" onClick={clear}>\n                {' '}\n                Clear{' '}\n              </button>\n            </div>\n            <header ref={revealTitle}>\n              <h1 className=\"heading\">Hough transform</h1>\n              <p className=\"inner\">Draw edges and see their hough transforms.</p>\n            </header>\n          </div>\n        </StyledMainContainer>\n      </main>\n    </Layout>\n  );\n};\n\nHoughPage.propTypes = {\n  location: PropTypes.object.isRequired,\n};\n\nexport default HoughPage;\n","// 20.2.2.30 Math.sinh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require('./_fails')(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n"],"sourceRoot":""}